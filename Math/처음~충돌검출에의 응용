점
 - 함수를 정의하는 방식 ex)방정식 
 - 테이블 형태의 함수 정의보다 메모리를 적게 소모함
 - 화면에 무엇인가를 표시할 때 많이 사용
2차원 위치표시
 - 데카르트 좌표계를 이용해서 표시
 - 마지막 단계는 데카르트좌표를 화면좌표로 변환 (y축 대칭)
3차원 위치표시
 - 2차원과 마찬가지, 다만 정해진 기준은 없음
 - 아래의 예시처럼 오히려 복잡한 방법을 선택해서 사용할 수도 있음.
struct 3dPoint{
float x, y, z;
//11 덧셈 연산자 오버로딩
3dPoint operator+(const 3dPoint& P2) const
3dPoint temp = {
this-)x + P2.x, this-)y + P2.y, this-)z + P2.z}
return temp;
}

직선을 표시하는 법
 - "A와 B가 동시에 0이 아닐 때， Ax + By = C 꼴을 갖는 방정식의 그래프는 직선입니다. 역으 로， 모든 직선은 A와 B가 동시에 0이 아닌 Ax + By 二 C 꼴의 방정식으로 표현할 수 있습니다"

충돌 검출에의 응용
 - 직선의 교점이 있다면 두 직선은 충돌함
