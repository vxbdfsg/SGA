1. 상속
 - 클래스를 바탕으로 새로운 클래스를 만드는 개념
클래스 : public, protetctive, private. 기본적으로 프라이빗. 구조체는 퍼블릭.
오버라이드 : 상속받은 부분을 변경하는 것.
2. 다형성
 - 헤당 클래스가 다른 클래스를 참조할 수 있게 해주는 것.
3. 가상함수
 - virtual을 이용해 상속된 클래스가 함수를 오버라이드 한 경우 포인터의 형을 이용해 실행할 함수를 결정
* 참고 : https://coding-factory.tistory.com/699

23/8/10
4. 상속해야 하는가?
 - 포함과 상속 : 상속은 반드시 '~이다' 의 관계가 성립해야함
 - 동적과 데이터 : 그저 다른데이터를 만드는 것이 아닌 동작을 변경하는 경우에만 상속을 이용
5. 상속을 피해야 할 상황
 - 먼저 가상함수를 이용하는데에는 얼마간의 성능저하가 따름. 즉, 필요한 부분에만 적절히 사용해야 함
 - 미래의 확장성을 위해 무분별한 상속은 '지양' 해야한다.
 - 부모 클래스의 너무 많은 함수 또한 성능 저하를 일으킬 수 있다. (확실하게 이해한 것인지는 잘 모르겠음)
6. 상속의 구현
 - 가상함수를 이용하면 메모리 내의 가상테이블이 생성되고 이는 약간의 메모리이용과 성능저하를 일으킴. 다만 이러한 가상함수 이용이 비 가상함수 이용에 영향을 미치지는 않음
 - 가상테이블은 클래스당 한개씩 존재하는데 이는 클래스마다 여러개의 인스턴스가 만들어 질 수있기 때문에 심각할 만큼의 메모리이용은 없다.
 - 한 클래스의 개체는 모두 같은 가상테이블을 이용하므로 가상테이블을 가리키는 포인터 하나만 있으면 된다.
