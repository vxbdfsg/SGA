1. const 키워드 : 프로그램 실행중 변경불가능하게 만듬
 - private 나 protected와 비슷하게 처리함
 - 문제를 알아낼 수 있는 적절한 방법중 하나
 - #define은 대체만 할뿐 형에 대한 확인은 하지 않음

2. 포인터와 상수
int * pDatal;
 - 서로간 수정 가능
const int * pData2;
 - 형이 고정된 포인터
int * const pData3 ;
 - 포인터가 고정된 형
const int * const pData4 ; 
 - 서로간 수정 불가능

3. 함수와 const
 - 함수 인자의 리턴값에 적용하는 경우가 많음
 - const를 이용하지 않으면 성능상의 이유인지 데이터를 변경해도 좋은지 알 수 없음
 - 적절한 const사용은 데이터의 변경가능성을 없애주므로 혼동을 줄일 수 있음
 - 리턴값이 행렬같은 복사하기 힘든 값이면 포인터로 리턴을 할 수있고 이때
   const를 쓰면 포인터를 통한 데이터의 수정을 방지 할 수 있음
