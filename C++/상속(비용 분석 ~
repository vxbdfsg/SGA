1. 비용분석
 - 형 변환 : 개체가 특정 클래스임을 확인
 - 컴파일러는 해당하는 포인터에 수행할 작업이 올바른지, 가상합수가 올바른 가상테이블을 사용하는지 확인
 - 다중상속의 경우 : 다른 형으로의 형변환을 위한 포인터 개체가 필요하며 자신의 가상함수를 가진다른 다수의 연결된 개체로부터 하생개체가 만들어지므로 달라짐

1) 첫번째 부모클래스로의 형변환 : 포인터를 건드릴 필요 없으며 자유롭게 이루어짐
2) 첫번째가 아닌 부모클래스에서 파생클래스로의 형변환 : 포인터 수정이 필요함
3) 파생클래스에서 두번째 부모클래스로의 형변환 : 포인터 수정이 필요함

 - 이러한 포인터연산이 성능에 미치는 영향은 미세하지만 가상함수의 접근이나 함수호출로 인한 영향은 그 이상임
 - 좀 더 심각한 성능저하는 dunamic_cast에서 오는데 이는 실행중(런타임)시에 클래스간 변환이 가능한지 확인해야 하며 
 - 이를 위해 변환하려는 포인터의 형과 참조되는 개체의 형, 목적클래스의 형을 모두 고려해야 하므로 상속트리가 커질수록 복잡해지고 오래걸리게 된다.

2. 두번째 부모 클래스의 가상 함수
 - 파생 개체가 다수의 가상테이블을 가지고있고 이 함수가 호출될때마다 모든 포인터의 수정이 이루어져야하다. 다만 dynamic_cast만큼 성능저하가 있진 않다.

결론 : 다중 상속이 두개이상의 부모클래스를 기반으로 새로운 클래스를 만들 수 있지만 성능저하, 단순해야하는 클래스가 복잡해진다는 문제가 있다.
따라서 보통은 다른 대안을 찾아보는것이 권장됨. 다른 방안도 있긴있음.
